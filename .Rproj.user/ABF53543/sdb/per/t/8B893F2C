{
    "collab_server" : "",
    "contents" : "\n\n---\noutput:\n  html_document: \n    css: style.css\n    highlight: kate\n    theme: journal\n    includes:\n      in_header: header.html\n      after_body: footer.html\n---\n  \n  <center>\n  <h1> 16s RNA Microbiome Analysis for Steven Greenway</h1>\n  <h4> Hena R. Ramay, PhD (hena.ramay\\@ucalgary.ca)</h4>\n  <h5> Western Canadian Microbiome Centre Bioinformatics Services</h5>\n  <h5> University of Calgary, Calgary, CA</h5>\n  <center>\n  </center>\n  </center>\n  \n  <center>\n  \n  ```{r knitrOptions, message=FALSE, echo=FALSE,results='hide'}\nlibrary(knitr)\nopts_chunk$set(warning=FALSE, message=FALSE, cache=FALSE, echo=FALSE, fig.width=9, fig.height=5.5)\n```\n\n```{r initialize,results='hide'}\nlibrary(plotly)\nlibrary(phyloseq)\nlibrary(vegan)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(DT)\nlibrary(biom)\nlibrary(readr)\nlibrary(Biostrings)\nlibrary(lubridate)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(webshot)\nlibrary(limma)\nlibrary(reshape2)\nlibrary(DESeq2)\ntheme_set(theme_bw())\nlibrary(stringr)\ndyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home/jre/lib/server/libjvm.dylib')\nrequire(rJava)\nlibrary(xlsx)\nlibrary(gridExtra)\nsource(\"greenway_multqc.R\")\n\n\ndatatable2<-function(res,...)\n{\n  return(datatable(res,options=list(pageLength = 10,dom = 'lBfrtip',\n                                    buttons = c('copy', 'csv', 'excel', 'print'),\n                                    initComplete = JS(\n                                      \"function(settings, json) {\",\n                                      \"$(this.api().table().header()).css({'background-color': '#595757', 'color': '#fff'});\",\n                                      \"}\")),extensions = 'Buttons',...\n  ))\n  \n}\n\n\nplotly_bar_paper <- function(data,title,legend)\n{\n  #  data$type <-\n  #    factor(data$type, levels = unique(data$type)[order(data$Abundance, decreasing = TRUE)])\n  cols = colp(length(levels(data$type)))\n  title = title\n  #ord<-data$Sample[order(as.numeric(strsplit2(data$Sample,split = 'S')[,2]))]\n  ord<-unique(data$Sample[order(as.numeric(str_replace_all(data$Sample, \"[[:alpha:]]\", \"\")))])\n  print(ord)\n  p<-plot_ly(data) %>%\n    add_trace(\n      x = ~ Sample,\n      y = ~ Abundance,\n      type = 'bar',\n      colors = cols,\n      showlegend = legend,\n      legendgroup =  ~ type,\n      #visible = \"legendonly\",\n      color =  ~ type#,\n      #marker = list(line = list(color = \"black\", width = 0.5))\n    ) %>%\n    layout(\n      yaxis = list(title = 'Abundance'),\n      xaxis = list(title=title,showticklabels = TRUE,categoryorder = \"array\", categoryarray =ord,tickfont=list(size=9)),\n      barmode = 'stack',\n      margin = m,\n      hovermode=\"closest\"\n      \n    )\n  \n  #p$legend<-levels(data$type)\n  return(p)\n}\n\n\ninput_data=\"~/projects/Reimer/aspartame/first_run/\"\noutput_data=\"results/\"\noutput_plots=\"plots/\"\ndir.create(output_data)\ndir.create(output_plots)\n#Set color palette\ncolp=colorRampPalette(brewer.pal(9, \"Set1\") )\ntitle_f= list(#color = '#9f3a3a',\n  family = 'Sans-Serif',\n  size = 20)\npval_f= list(#color = '#9f3a3a',\n  family = 'Sans-Serif',\n  size = 14)\n\n\n# m <- list(\n#   l = 50,\n#   r = 50,\n#   b = 100,\n#   t = 100,\n#   pad = 4\n# )\nm=c(3,3,3,3)\n\n#read data\n#align<-readRDS(paste0(input_data,\"/alignment.rds\"))\n#tree<-readRDS(paste0(input_data,\"/fitGTR.rds\"))\nseqtab<-readRDS(paste0(input_data,\"seqtab.rds\"))\n#rownames(seqtab)<-factor(paste0(str_replace_all(rownames(seqtab),pattern = \"X\",replacement = \"-\"),\"_\",\"Heidi\"))\ntaxtab<-readRDS(paste0(input_data,\"ttplus.rds\"))\n\n#samples\nsamples<-read.csv(\"../../aspartame/first_run/Sample_Sheet_run1.csv\",stringsAsFactors = TRUE)\n\n#sample_names=strsplit2(unique(c('Li6008_S1','Li6008_S1','Li6009_S13','Li6009_S13','Li6010_S25','Li6010_S25','Li6011_S37','Li6011_S37','Li6012_S49','Li6012_S49','Li6013_S61','Li6013_S61','Li6014_S73','Li6014_S73','Li6015_S85','Li6015_S85','Li6016_S2','Li6016_S2','Li6017_S14','Li6017_S14','Li6018_S26','Li6018_S26','Li6019_S38','Li6019_S38','Li6020_S50','Li6020_S50','Li6021_S62','Li6021_S62','Li6022_S74','Li6022_S74','Li6023_S86','Li6023_S86','Li6024_S3','Li6024_S3','Li6025_S15','Li6025_S15','Li6026_S27','Li6026_S27','Li6027_S39','Li6027_S39','Li6028_S51','Li6028_S51','Li6029_S63','Li6029_S63','Li6030_S75','Li6030_S75','Li6031_S87','Li6031_S87','Li6032_S4','Li6032_S4','Li6033_S16','Li6033_S16','Li6034_S28','Li6034_S28','Li6035_S40','Li6035_S40','Li6036_S52','Li6036_S52','Li6037_S64','Li6037_S64','Li6038_S76','Li6038_S76','Li6039_S88','Li6039_S88','Li6040_S5','Li6040_S5','Li6041_S17','Li6041_S17','Li6042_S29','Li6042_S29','Li6043_S41','Li6043_S41','Li6044_S53','Li6044_S53','Li6045_S65','Li6045_S65','Li6046_S77','Li6046_S77','Li6047_S89','Li6047_S89','Li6048_S6','Li6048_S6','Li6049_S18','Li6049_S18','Li6050_S30','Li6050_S30','Li6051_S42','Li6051_S42','Li6052_S54','Li6052_S54','Li6053_S66','Li6053_S66','Li6054_S78','Li6054_S78','Li6055_S90','Li6055_S90','Li6056_S7','Li6056_S7','Li6057_S19','Li6057_S19','Li6058_S31','Li6058_S31','Li6059_S43','Li6059_S43','Li6060_S55','Li6060_S55','Li6061_S67','Li6061_S67','Li6062_S79','Li6062_S79','Li6063_S91','Li6063_S91','Li6064_S8','Li6064_S8','Li6065_S20','Li6065_S20','Li6066_S32','Li6066_S32','Li6067_S44','Li6067_S44','Li6068_S56','Li6068_S56','Li6069_S68','Li6069_S68','Li6070_S80','Li6070_S80','Li6071_S92','Li6071_S92','Li6072_S9','Li6072_S9','Li6073_S21','Li6073_S21','Li6074_S33','Li6074_S33','Li6075_S45','Li6075_S45','Li6076_S57','Li6076_S57','Li6077_S69','Li6077_S69','Li6078_S81','Li6078_S81','Li6079_S93','Li6079_S93','Li6080_S10','Li6080_S10','Li6081_S22','Li6081_S22','Li6082_S34','Li6082_S34','Li6083_S46','Li6083_S46','Li6084_S58','Li6084_S58','Li6085_S70','Li6085_S70','Li6086_S82','Li6086_S82','Li6087_S94','Li6087_S94','Li6088_S11','Li6088_S11','Li6089_S23','Li6089_S23','Li6090_S35','Li6090_S35','Li6091_S47','Li6091_S47','Li6092_S59','Li6092_S59','Li6093_S71','Li6093_S71','Li6094_S83','Li6094_S83','Li6095_S95','Li6095_S95','Li6096_S12','Li6096_S12','Li6097_S24','Li6097_S24','Li6098_S36','Li6098_S36','Li6099_S48','Li6099_S48','Li6100_S60','Li6100_S60','Li6101_S72','Li6101_S72','Li6102_S84','Li6102_S84','Li6103_S96','Li6103_S96','Li6104_S97','Li6104_S97','Li6105_S98','Li6105_S98','Li6106_S99','Li6106_S99','Li6107_S100','Li6107_S100')),\"_\")\n\n#sample_names=strsplit2(unique(c('4371_S101','4371_S101','4372_S102','4372_S102','4373_S103','4373_S103','4448_S104','4448_S104','4449_S105','4449_S105','4450_S106','4450_S106','4451_S107','4451_S107','4452_S108','4452_S108','4453_S109','4453_S109','4973_S1','4973_S1','4974_S2','4974_S2','4975_S3','4975_S3','4976_S4','4976_S4','4977_S5','4977_S5','4978_S6','4978_S6','4979_S7','4979_S7','4980_S8','4980_S8','4981_S9','4981_S9','4982_S10','4982_S10','4983_S11','4983_S11','4984_S12','4984_S12','4985_S13','4985_S13','4986_S14','4986_S14','4987_S15','4987_S15','4988_S16','4988_S16','4989_S17','4989_S17','4990_S18','4990_S18','4991_S19','4991_S19','4992_S20','4992_S20','4993_S21','4993_S21','4994_S22','4994_S22','4995_S23','4995_S23','4996_S24','4996_S24','4997_S25','4997_S25','4998_S26','4998_S26','4999_S27','4999_S27','5000_S28','5000_S28','5001_S29','5001_S29','5002_S30','5002_S30','5003_S31','5003_S31','5004_S32','5004_S32','5005_S33','5005_S33','5006_S34','5006_S34','5007_S35','5007_S35','5008_S36','5008_S36','5009_S37','5009_S37','5010_S38','5010_S38','5011_S39','5011_S39','5012_S40','5012_S40','5013_S41','5013_S41','5014_S42','5014_S42','5015_S43','5015_S43','5016_S44','5016_S44','5017_S45','5017_S45','5018_S46','5018_S46','5019_S47','5019_S47','5020_S48','5020_S48','5021_S49','5021_S49','5022_S50','5022_S50','5023_S51','5023_S51','5024_S52','5024_S52','5025_S53','5025_S53','5026_S54','5026_S54','5027_S55','5027_S55','5028_S56','5028_S56','5029_S57','5029_S57','5030_S58','5030_S58','5031_S59','5031_S59','5032_S60','5032_S60','5033_S61','5033_S61','5034_S62','5034_S62','5035_S63','5035_S63','5036_S64','5036_S64','5037_S65','5037_S65','5038_S66','5038_S66','5039_S67','5039_S67','5040_S68','5040_S68','5041_S69','5041_S69','5042_S70','5042_S70','5043_S71','5043_S71','5044_S72','5044_S72','5045_S73','5045_S73','5046_S74','5046_S74','5047_S75','5047_S75','5048_S76','5048_S76','5049_S77','5049_S77','5050_S78','5050_S78','5051_S79','5051_S79','5052_S80','5052_S80','5053_S81','5053_S81','5054_S82','5054_S82','5055_S83','5055_S83','5056_S84','5056_S84','5057_S85','5057_S85','5058_S86','5058_S86','5059_S87','5059_S87','5060_S88','5060_S88','5061_S89','5061_S89','5062_S90','5062_S90','5063_S91','5063_S91','5064_S92','5064_S92','5065_S93','5065_S93','5066_S94','5066_S94','5067_S95','5067_S95','5068_S96','5068_S96','5069_S97','5069_S97','5070_S98','5070_S98','5071_S99','5071_S99','5072_S100','5072_S100','Undetermined_S0','Undetermined_S0')),\"_\")\n\n#rownames(seqtab)<-sample_names[which(rownames(seqtab) %in% sample_names[,1]),2]\n\nsamples$Group=factor(paste0(samples$Type,\"_\",samples$Gender))\n#samples$Group=samples$type\nrownames(samples)=samples$ID\nall(rownames(seqtab) %in% samples$ID)\n#samples <- samples[rownames(seqtab), ]\n# samples$Week_of_study<-factor(samples$Week_of_study)\n# samples$Subject_Number<-factor(samples$Subject_Number)\n# samples$Group<-factor(samples$Group)\n# samples$Group<-factor(samples$Group)\n#Change rownames\nrownames(taxtab)=paste(\"Seq\",seq(1:dim(seqtab)[2]),sep=\"\")\ncolnames(seqtab)=paste(\"Seq\",seq(1:dim(seqtab)[2]),sep=\"\")\n\n\n#make phyloseq\nps <- phyloseq(tax_table(taxtab),\n               sample_data(samples),\n               #phy_tree(tree$tree),\n               otu_table(seqtab, taxa_are_rows = FALSE))\n#ps@sam_data$Collection.Date=factor(ps@sam_data$Collection.Date)\n\n#remove mito chloroplast\nps = ps %>%\n  subset_taxa(is.na(Family) | Family != \"mitochondria\") %>%\n  subset_taxa(Phylum != \"Cyanobacteria\") %>%\n  subset_taxa(Phylum != \"Cyanobacteria/Chloroplast\")\n\n# top20 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:20]\n# ps.top20 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))\n# ps.top20 <- prune_taxa(top20, ps.top20)\n\n#check negative control\n\n#which(ps@otu_table[\"S100\",] >0)-> seqs\n#rowSums(ps@otu_table[,seqs]) <=0\n\nprune_samples(rowSums(ps@otu_table)>3000,ps)-> ps\n\n```\n\n\n\n<br><br>\n  \n  ### Overview\n  \n  The following analysis is prepared for Dr. Steven Greenway's. This data comprises of saliva and stool samples from two transplant patients over a time course of 5 weeks.The data analyzed here is 16s RNA amplicon sequencing data for a total of 23 samples.\n\n\n<b>NOTE:Most of the plots are interactive and legend icons can be used to add or remove samples or groups from a plot. Plots can be saved as a png by clicking on the camera icon in the plot menubar.</b>\n\n<br>\n<br>\n\n### Sequence Quality and filtering { #SequenceQuality }\n\nIn the following plots, trimmed and filtered reads based on their quality and shown in this plot as <font color=\"red\">Fastqc</font>. <font color=\"grey\">Merged</font> reads are the number of reads where forward and reverse reads could be overlapped to form a single sequence. After looking at this data, samples with < 5000 sequences were discarded.\n\n<!-- #### Number of Sequences per sample -->\n\n<!-- ```{r seqs, } -->\n\n<!-- input<-read.csv(paste0(input_data,\"multiqc_data/multiqc_fastqc.txt\"),header = T,sep=\"\\t\",stringsAsFactors = F) -->\n\n<!-- plot_tot_seqs(input,sample_sums(ps)) -->\n\n<!-- ps<-subset_samples(ps,sample_sums(ps)>5000) -->\n\n\n<!-- ``` -->\n\n<!-- #### Sequence per base Quality per sample -->\n\n<!-- ```{r multiqc plots,eval=TRUE} -->\n<!-- input<-read.csv(\"../data/multiqc_data/mqc_fastqc_per_base_sequence_quality_plot_1.txt\" -->\n<!--                  ,sep = \"\\t\",stringsAsFactors = F,header = F) -->\n<!-- p<-plot_seq_quality(input) -->\n<!-- ggplotly(p) -->\n\n<!-- ``` -->\n<br>\n<br>\n<br><br>\n\n### Overview of Samples at Phylum and Family taxa levels {.tabset #overviewtaxa }\nIn the following plots, stack bar plots are made to show the relative abundance in each sample at different taxa level.\n\n#### Phylum\n\n```{r}\nps2<-tax_glom(ps,taxrank = \"Phylum\")\nps2 = transform_sample_counts(ps2, function(x) x/sum(x))\n#ps2<-prune_taxa(taxa_sums(ps2) > 0.5,ps2)\nmelt<-psmelt(ps2)\nmelt$Sample<-factor(melt$Sample)\nmelt$type<-melt$Phylum\n\n\ngroup_by(melt,Sample,type,Group) %>%\ndplyr::arrange(Sample)%>%\nsplit(.$Group)  %>%\nlapply(function(x) {\nx$Group<-droplevels(x$Group);\nif(levels(x$Group) ==\"Patient_1_saliva\") legend=TRUE else legend=FALSE\nplotly_bar_paper(x,title=levels(x$Group),legend)}) %>%\nsubplot(nrows = 1,titleX = TRUE,shareY = TRUE) ->p\nfor(i in 1:length(p$x$data))\np$x$data[[i]]$legendgroup<-p$x$data[[i]]$name\np\n\n```\n\n\n\n\n#### Family\n\n```{r}\nps2<-tax_glom(ps,taxrank = \"Family\")\nps2 = transform_sample_counts(ps2, function(x) x/sum(x))\n#ps2<-prune_taxa(taxa_sums(ps2) > 0.5,ps2)\nmelt<-psmelt(ps2)\nmelt$Sample<-factor(melt$Sample)\nmelt$type<-melt$Family\n\n\ngroup_by(melt,Sample,type,Group) %>%\ndplyr::arrange(Sample)%>%\nsplit(.$Group)  %>%\nlapply(function(x) {\nx$Group<-droplevels(x$Group);\nif(levels(x$Group) ==\"Patient_1_saliva\") legend=TRUE else legend=FALSE\nplotly_bar_paper(x,title=levels(x$Group),legend)}) %>%\nsubplot(nrows = 1,titleX = TRUE,shareY = TRUE) ->p\nfor(i in 1:length(p$x$data))\np$x$data[[i]]$legendgroup<-p$x$data[[i]]$name\np\n\n```\n\n\n\n#### Genus\n\n```{r}\nps2<-tax_glom(ps,taxrank = \"Genus\")\nps2 = transform_sample_counts(ps2, function(x) x/sum(x))\n#ps2<-prune_taxa(taxa_sums(ps2) > 0.5,ps2)\nmelt<-psmelt(ps2)\nmelt$Sample<-factor(melt$Sample)\nmelt$type<-melt$Genus\n\n\ngroup_by(melt,Sample,type,Group) %>%\ndplyr::arrange(Sample)%>%\nsplit(.$Group)  %>%\nlapply(function(x) {\nx$Group<-droplevels(x$Group);\nif(levels(x$Group) ==\"Aspartame\") legend=TRUE else legend=FALSE\nplotly_bar_paper(x,title=levels(x$Group),legend)}) %>%\nsubplot(nrows = 1,titleX = TRUE,shareY = TRUE) ->p\nfor(i in 1:length(p$x$data))\np$x$data[[i]]$legendgroup<-p$x$data[[i]]$name\np\n\n```\n\n#### Summarized Phylum\n\n```{r suPhylum}\nps_avg<-merge_samples(x = ps,group = \"Group\")\nsample_data(ps_avg)$Group<-factor(rownames(ps_avg@sam_data))\n\nps2 = transform_sample_counts(ps_avg, function(x) x/sum(x))\nmelt<-psmelt(ps2)\nmelt$Sample<-factor(melt$Sample)\n\nmelt$type<-melt$Phylum\n\ngroup_by(melt,Sample,type,Group) %>%\n    dplyr::arrange(Sample)%>%\n    split(.$Group)  %>%\n   lapply(function(x) {\n     x$Group<-droplevels(x$Group);\n     if(levels(x$Group) ==\"Aspartame\") legend=TRUE else legend=FALSE\n   plotly_bar_paper(x,title=levels(x$Group),legend)}) %>%\n    subplot(nrows = 1,titleX = TRUE,shareY = TRUE) ->p\n       for(i in 1:length(p$x$data))\n        p$x$data[[i]]$legendgroup<-p$x$data[[i]]$name\n\np\n```\n\n#### Summarized Family\n\n```{r suF}\nps_avg<-merge_samples(x = ps,group = \"Group\")\nsample_data(ps_avg)$Group<-factor(rownames(ps_avg@sam_data))\n\nps2 = transform_sample_counts(ps_avg, function(x) x/sum(x))\nmelt<-psmelt(ps2)\nmelt$Sample<-factor(melt$Sample)\n\nmelt$type<-melt$Family\ngroup_by(melt,Sample,type,Group) %>%\n    dplyr::arrange(Sample)%>%\n    split(.$Group)  %>%\n   lapply(function(x) {\n     x$Group<-droplevels(x$Group);\n     if(levels(x$Group) ==\"Aspartame\") legend=TRUE else legend=FALSE\n   plotly_bar_paper(x,title=levels(x$Group),legend)}) %>%\n    subplot(nrows = 1,titleX = TRUE,shareY = TRUE) ->p\n       for(i in 1:length(p$x$data))\n        p$x$data[[i]]$legendgroup<-p$x$data[[i]]$name\n\np\n```\n\n#### Summarized Genus\n\n```{r suGenus}\nps_avg<-merge_samples(x = ps,group = \"Group\")\nsample_data(ps_avg)$Group<-factor(rownames(ps_avg@sam_data))\n\nps2 = transform_sample_counts(ps_avg, function(x) x/sum(x))\nmelt<-psmelt(ps2)\nmelt$Sample<-factor(melt$Sample)\n\nmelt$type<-melt$Genus\n\ngroup_by(melt,Sample,type,Group) %>%\n    dplyr::arrange(Sample)%>%\n    split(.$Group)  %>%\n   lapply(function(x) {\n     x$Group<-droplevels(x$Group);\n     if(levels(x$Group) ==\"Aspartame\") legend=TRUE else legend=FALSE\n   plotly_bar_paper(x,title=levels(x$Group),legend)}) %>%\n    subplot(nrows = 1,titleX = TRUE,shareY = TRUE) ->p\n       for(i in 1:length(p$x$data))\n        p$x$data[[i]]$legendgroup<-p$x$data[[i]]$name\n\np\n```\n\n\n<!-- #### T-test table at Family Level -->\n\n<!-- ```{r} -->\n<!-- psf<-tax_glom(ps,taxrank = \"Family\") -->\n<!-- dds<-phyloseq_to_deseq2(psf,design=~Group) -->\n<!-- dds <- estimateSizeFactors(dds) -->\n<!-- dds <- estimateDispersions(dds) -->\n<!-- vsd <- varianceStabilizingTransformation(dds) -->\n<!-- family<-data.frame(t(assay(vsd))) -->\n<!-- colnames(family)<-psf@tax_table[,'Family'] -->\n<!-- family<-family/rowSums(family) -->\n<!-- if(all.equal(rownames(family),rownames(psf@sam_data))) -->\n<!--   split(family,f = psf@sam_data$Group)->groups -->\n<!-- ttab <- as.data.frame(matrix(nrow=ncol(family),ncol=2)) -->\n<!-- for(i in 1:ncol(family)){  -->\n<!--   ttab[i,2]<-t.test(x=groups[[1]][,i],y=groups[[2]][,i])$p.value -->\n<!--   ttab[i,1]<-t.test(x=groups[[1]][,i],y=groups[[2]][,i])$statistic -->\n<!-- } -->\n<!-- colnames(ttab)<-c(\"stastic\",\"p_value\") -->\n<!-- rownames(ttab)<-colnames(family) -->\n<!-- fampvals<-data.frame(Family=psf@tax_table[,\"Family\"],ttab,pvalue_fdr=p.adjust(ttab[,2],method = \"fdr\"),pvalue_bonferroni=p.adjust(ttab[,2],method = \"bonferroni\")) -->\n<!-- format(fampvals,digits=2) %>% datatable2(.,rownames=FALSE) -->\n\n<!-- write.xlsx(fampvals, file=paste0(output_data,\"/rel_abundance_family_Tests.xlsx\"),sheetName = \"T-test\",row.names = FALSE) -->\n\n<!-- ``` -->\n\n```{r,eval=FALSE}\nlibrary(lme4)\ncolnames(family)<-psf@tax_table[,'Family']\n\nall<-data.frame(psf@sam_data,family)\n\nall$Number=factor(all$Number)\nall$Age=factor(all$Age)\nall$Years_Post_Transplant=factor(all$Years_Post_Transplant)\nmelted<-melt(all)\nmelted<-melted[-which(is.na(melted$value)),]\n\nf1<-formula(value~variable*Group +(1|ID))\nfm1<-lmer(f1,data=melted)\ntestFactors(fm1,pairwise=\"Group\") -> res\n\n\n\n```\n\n<!-- #### Anova Table at Family Level -->\n\n<!-- ```{r anova } -->\n<!-- colnames(family)<-psf@tax_table[,'Family'] -->\n\n<!-- all<-data.frame(psf@sam_data,family) -->\n\n<!-- all$Number=factor(all$Number) -->\n<!-- all$Age=factor(all$Age) -->\n<!-- all$Years_Post_Transplant=factor(all$Years_Post_Transplant) -->\n\n<!-- anovtab <- as.data.frame(matrix(nrow=ncol(all),ncol=2)) -->\n<!-- #anovtab$Alpha<-colnames(all)[6:ncol(all)] -->\n<!-- #anovtab<-data.frame(row.names = 1:ncol(all)) -->\n<!-- anov_res<-list() -->\n<!-- temp<-vector() -->\n<!-- for(i in 21:ncol(all)){ -->\n\n<!--   anov_res[[i]]<-summary(aov(all[,i]~Group,data = all)) -->\n<!--   temp<-c(anov_res[[i]][[1]][1,2],anov_res[[i]][[1]][1,5]) -->\n<!--   names(temp)<-c(\"Sum Sq\",\"pvalue\") -->\n<!--   colnames(anovtab)<-names(temp) -->\n<!--   anovtab[i,]<-temp -->\n<!--   } -->\n<!-- anovtab<- na.omit(anovtab) -->\n<!-- rownames(anovtab)<-colnames(all)[21:ncol(all)] -->\n<!-- anovtab$pvalue_fdr<-p.adjust(anovtab$pvalue,method=\"fdr\") -->\n<!-- anovtab$pvalue_bonferroni<-p.adjust(anovtab$pvalue,method=\"bonferroni\") -->\n<!-- #anovtab<-anovtab%>%select(Alpha,1:6) -->\n<!-- format(anovtab,digits=2) %>% datatable2(.,rownames=TRUE) -->\n<!-- write.xlsx(anovtab, file=paste0(output_data,\"/rel_abundance_family_Tests.xlsx\"),sheetName = \"Anova\",append = TRUE) -->\n\n<!-- ``` -->\n\n\n\n<br>\n<br>\n<br>\n\n\n### Timepoint plots {.tabset #tp}\n\nThe following plots show the relative abundances at each time point at different taxa levels for the sample groups present.\n\n\n\n#### Phylum\n\n\n```{r phylum}\n\nwrite.xlsx(relative_abund(ps,\"Phylum\"), file=paste0(output_data,\"/Rel_Abundance.xlsx\"), sheetName=\"Phylum\")\nwrite.xlsx(relative_abund(ps,\"Class\"), file=paste0(output_data,\"/Rel_Abundance.xlsx\"), sheetName=\"Class\", append=TRUE)\nwrite.xlsx(relative_abund(ps,\"Order\"), file=paste0(output_data,\"/Rel_Abundance.xlsx\"), sheetName=\"Order\", append=TRUE)\nwrite.xlsx(relative_abund(ps,\"Family\"), file=paste0(output_data,\"/Rel_Abundance.xlsx\"), sheetName=\"Family\", append=TRUE)\nwrite.xlsx(relative_abund(ps,\"Genus\"), file=paste0(output_data,\"/Rel_Abundance.xlsx\"), sheetName=\"Genus\", append=TRUE)\nwrite.xlsx(ps@sam_data, file=paste0(output_data,\"/Rel_Abundance.xlsx\"), sheetName=\"Sample_Information\", append=TRUE)\n\nlevel=\"Phylum\"\n\nphyl=relative_abund(ps,level)\nphyl=data.frame(phyl,sample_data(ps))\n# aov <- summary(aov(phyl[,\"Bacteroidetes\"] ~ ps@sam_data$Group * ps@sam_data$Week_of_study\n#                                        + Error(ps@sam_data$Sample_Name /\n#                                                  (ps@sam_data$Group*ps@sam_data$Week_of_study))))\n\n\ncols=colp(2+length(levels(ps@sam_data$Group)))\n\n\n```\n\n<!-- ![](plots/Legend.png) -->\n\n```{r rel_abund_plot}\n\np<-lapply(1:(ncol(phyl)-7),\nfunction(x){\nggplot(phyl,aes(x=Group,y=phyl[,x],colour=Group,group=Group))+\ntheme(legend.position=\"none\",\naxis.text.x = element_text(size=6),\naxis.text.y = element_text(size=6),\nplot.title = element_text(size = 10))+\nggtitle(colnames(phyl)[x]) +\nlabs(x=\"Time\",y=\"R_Abund\")+ geom_point()+geom_line()+\nscale_colour_manual(values=cols)\n#geom_jitter()\n})\nml <- marrangeGrob(p, nrow=4, ncol=4,top=level)\nml\n\n\n\n```\n\n#### Class\n\n```{r}\nlevel=\"Class\"\nphyl=relative_abund(ps,level)\nphyl=data.frame(phyl,sample_data(ps))\n```\n\n<!-- ![](plots/Legend.png) -->\n\n```{r , ref.label='rel_abund_plot'}\n```\n\n#### Order\n\n```{r}\nlevel=\"Order\"\nphyl=relative_abund(ps,level)\nphyl=data.frame(phyl,sample_data(ps))\n```\n\n<!-- ![](plots/Legend.png) -->\n\n```{r , ref.label='rel_abund_plot'}\n```\n\n#### Family\n\n```{r}\nlevel=\"Family\"\nphyl=relative_abund(ps,level)\nphyl=data.frame(phyl,sample_data(ps))\n```\n\n<!-- ![](plots/Legend.png) -->\n\n```{r , ref.label='rel_abund_plot'}\n```\n\n\n#### Genus\n\n```{r}\nlevel=\"Genus\"\nphyl=relative_abund(ps,level)\nphyl=data.frame(phyl,sample_data(ps))\n```\n\n<!-- ![](plots/Legend.png) -->\n\n```{r , ref.label='rel_abund_plot'}\n```\n\n\n### Alpha Diversity (within sample diversity measure) {.tabset #alpha}\n\nFollowing plots show alpha diversity in the different sample groups. To make the differences very clear, time point plots for Shannon and Simpson diversity are also included per patient group.\n\n```{r}\n#plot_richness(ps,measures=c(\"Shannon\", \"Simpson\"), color=\"Group\")\nrichness<-estimate_richness(ps)\n```\n\n#### Overall\n```{r Richness}\nax <- list(\n#zeroline = TRUE,\nshowline = TRUE,\nmirror = \"ticks\",\n# gridcolor = toRGB(\"gray50\"),\n# gridwidth = 2,\n# zerolinecolor = toRGB(\"red\"),\n# zerolinewidth = 4,\nlinecolor = toRGB(\"black\"),\nlinewidth = 1,\ncategoryorder=\"array\",\ncategoryarray=~order,\ntickfont=list(size=8)\n)\nrichness<-richness[,6:ncol(richness)]\nDF <- data.frame(richness, sample_data(ps))\nDF$sampleid<-rownames(sample_data(ps))\norder<-sample(DF$sampleid)\nDF$order<-order\ncols<-colp(2+length(levels(DF$Group)))\nalpha_divp<-list()\nfor (i in 1:ncol(richness))\n{\n  if(i==1)legend=TRUE else legend=FALSE\n # alpha_divp[[i]]<-plot_ly(DF,marker=list(size=10),type=box) %>%\n #   add_markers(x=~sampleid,y=DF[,i],colors=cols,color=~Group,legendgroup=~levels(Group),symbol=~Treatment,showlegend=legend)%>%\n # layout( margin=m,xaxis=append(list(title=colnames(DF)[i],showticklabels = FALSE),ax),yaxis=ax)\n\n  alpha_divp[[i]]<-plot_ly(DF,marker=list(size=10),type='box',x=~Group,y=DF[,i],color=~Group,legendgroup=~levels(Group),showlegend=legend) %>% layout(xaxis=append(list(title=colnames(DF)[i],showticklabels = FALSE),ax))\n }\n\npt<-subplot(alpha_divp,titleX = TRUE)\n\nfor(i in 1:length(pt$x$data))\n{\n  #pt$x$data[[i]]$name<-gsub(pattern = \"<br />\",replacement = \",\",x = pt$x$data[[i]]$name)\n pt$x$data[[i]]$legendgroup<-pt$x$data[[i]]$name\n}\npt\n\n# write.xlsx(x = DF %>% select(SampleID=sampleid,Batch=Group,1:9),file = paste0(output_data,\"/alpha_diversity.xlsx\"),row.names = FALSE,sheetName = \"Alpha_Index\",append=FALSE)\n```\n\n<br>\n<br>\n\n<!-- #### Shannon -->\n\n<!-- ```{r} -->\n<!-- cols=colour=colp(2+length(levels(DF$Group))) -->\n\n<!-- ggplotly(DF %>% select(6,14,16,12) %>% ggplot(.,aes(x=Collection.Date,y=Shannon,colour=Group,group=Group)) +geom_point()+geom_line()+facet_grid(.~Group)+scale_colour_manual(values=cols)) -->\n\n\n<!-- ``` -->\n\n<!-- #### Simpson -->\n\n<!-- ```{r} -->\n<!-- cols=colour=colp(2+length(levels(DF$Group))) -->\n\n<!-- ggplotly(DF %>% select(7,14,16,12) %>% ggplot(.,aes(x=Collection.Date,y=Simpson,colour=Group,group=Group)) +geom_point() +geom_line()+facet_grid(.~Group)+scale_colour_manual(values=cols)) -->\n\n\n<!-- ``` -->\n\n\n<!-- #### T-test -->\n\n<!-- ```{r t-test tables} -->\n<!-- ttest=data.frame(row.names = colnames(richness)) -->\n<!-- for(i in 1:length(t.res)) -->\n<!-- { -->\n\n<!--   ttest$statistic[i]=t.res[[i]]$statistic -->\n<!--   ttest$pval[i]=t.res[[i]]$p.value -->\n<!--   ttest$mean_Control[i]=t.res[[i]]$estimate[1] -->\n<!--    ttest$mean_Transplant[i]=t.res[[i]]$estimate[2] -->\n<!--   ttest$conf_int_low[i]=t.res[[i]]$conf.int[1] -->\n<!--   ttest$conf_int_up[i]=t.res[[i]]$conf.int[2] -->\n<!-- } -->\n<!-- #ttest  %>% kable(., format = \"markdown\",digits = 4,caption = \"Welch t-test results\") -->\n<!-- format(ttest[,1:2],digits=2) %>% datatable2(.,rownames=TRUE,caption=\"Welch t-test results\") -->\n\n<!-- write.xlsx(x = ttest,file = paste0(output_data,\"/alpha_diversity_Groups.xlsx\"),row.names = TRUE,sheetName = \"T-test\",append=TRUE) -->\n<!-- ``` -->\n\n\n<!-- #### Anova -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(ps)) -->\n<!-- fm_anov=formula(DF[,i]~Group) -->\n<!--  sheet_name=\"Anova\" -->\n\n<!--  anovtab <- as.data.frame(matrix(nrow=ncol(DF),ncol=2)) -->\n<!-- anov_res<-list() -->\n<!-- temp<-vector() -->\n<!-- for(i in 1:ncol(richness)){ -->\n<!--   anov_res[[i]]<-summary(aov(fm_anov,data =DF)) -->\n<!--   temp<-c(anov_res[[i]][[1]][1,2],anov_res[[i]][[1]][1,5]) -->\n<!--   names(temp)<-c(\"Sum Sq\",\"pvalue\") -->\n<!--   colnames(anovtab)<-names(temp) -->\n<!--   anovtab[i,]<-temp -->\n<!--   } -->\n<!-- anovtab<- na.omit(anovtab) -->\n<!-- rownames(anovtab)<-colnames(richness) -->\n<!-- format(anovtab,digits=2) %>% datatable2(.,rownames=TRUE) -->\n\n<!-- write.xlsx(x = anovtab,file = paste0(output_data,\"/alpha_diversity_Groups.xlsx\"),row.names = TRUE,sheetName = \"Anova\",append=TRUE) -->\n<!-- ``` -->\n\n\n\n<br><br>\n\n### Beta Diversity {.tabset #beta}\nBeta diversity represents the differences in species composition among samples. Here is measured using non-metric multidimensional scaling (NMDS) with Bray-Curtis dissimilarity as the distance measure.\n\n```{r NMDS Group,results=\"hide\"}\n#NMDS\ncols=colp(2+length(levels(ps@sam_data$Group)))\np<-ps %>%\ntransform_sample_counts(., function(x) log(1 + x)) %>%\nplot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"),\ncolor=\"Group\" ,title=\"Bray NMDS\")+ scale_colour_manual(values=cols) + geom_point(aes(size = 14))#%>% #+ theme_bw() \n\n```\n\n#### Group\n\n```{r NMDS plot}\np<-ggplotly(p)\np$x$layout$annotations[[1]]$text=\"\"\np\ntemp<-export(p,file = paste0(output_plots,\"beta_diversity.png\"),zoom=3)\n\n#+geom_point(aes(size=2))\n#ggplotly(p)\n```\n\n\n\n<!-- ```{r NMDS timepoint,results=\"hide\"} -->\n<!-- #NMDS -->\n\n<!-- cols=colp(2+length(levels(factor(ps@sam_data$Collection.Date)))) -->\n<!-- p<-ps %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"Collection.Date\", title=\"Bray NMDS\")+ scale_colour_manual(values=cols) + geom_point(aes(size = 14))#%>% #+ theme_bw()  -->\n\n<!-- ``` -->\n\n<!-- #### Time points -->\n\n<!-- ```{r NMDS plots} -->\n<!-- p<-ggplotly(p) -->\n<!-- p$x$layout$annotations[[1]]$text=\"\" -->\n<!-- p -->\n<!-- temp<-export(p,file = paste0(output_plots,\"beta_diversity.png\"),zoom=3) -->\n\n<!-- #+geom_point(aes(size=2)) -->\n<!-- #ggplotly(p) -->\n<!-- ``` -->\n\n\n\n\n\n\n<!-- #### PERMANOVA -->\n\n<!-- ```{r} -->\n<!-- d = phyloseq::distance(ps, \"bray\") -->\n<!-- sampdf = data.frame(sample_data(ps)) -->\n<!-- ad = adonis(d ~ Time, data = sampdf) -->\n<!-- ad$aov.tab %>% kable(.,format=\"markdown\",digits=4,caption = \" PERMANOVA Results (999 permutations)\") -->\n<!-- ``` -->\n\n\n<br>\n\n<br>\n\n<br>\n\n<!-- ### Analysis of Differential Abundance at Genus level  {.tabset} -->\n\n<!-- There were no species that were differentially expressed between the two groups. Hence, we looked at the Genus level. The table below shows the genera which are differentially expressed. -->\n\n\n<!-- ```{r Significant OTUs12g} -->\n<!-- # Lets do DESQ simple one -->\n<!-- genus<-tax_glom(ps,taxrank = \"Genus\") -->\n<!-- ps_dds<- phyloseq_to_deseq2(genus,design = ~Group) -->\n<!-- ddsTC <- DESeq(ps_dds,test = \"LRT\",reduced = ~1) -->\n<!-- resTC <- results(ddsTC) -->\n<!-- #res = get_sig_taxa(ddsTC, ps, 0.05, contrast=list(c(\"Group_Transplant_vs_Transplantfructose\",\"GroupTransplant.Week_of_study12\"))) -->\n<!-- res = get_sig_taxa(ddsTC, ps, 0.05,contrast=c(\"Group\",\"Control\",\"Transplant\")) -->\n<!-- ``` -->\n\n<!-- ##### Table -->\n\n<!-- ```{r} -->\n<!-- res  %>% select(Genus,Family,Order,Class,Phylum,-OTU,2:7) %>% kable(., format = \"markdown\",digits = 4) -->\n<!-- #write.table(res,file=paste0(output_data,\"/Group_Effect_Genus.csv\"),sep = \",\",row.names = F) -->\n<!-- ``` -->\n\n\n<!-- ##### Log fold change plot -->\n\n<!-- ```{r,fig.width=5.5, fig.height=4} -->\n<!-- lfc_plot(res) -->\n<!-- ``` -->\n\n<!-- <br> -->\n\n<!-- <br> -->\n\n<!-- ##### Top OTU log Abudance -->\n<!-- The following two plots show total log abundance (left)  and per sample log Abundance (right) for differentially expressed genera. Slider or play button can be used to see the the results for different genera. -->\n\n<!-- ```{r,fig.width=5.5, fig.height=4} -->\n<!-- top25 = res %>% top_n(25,p.value) -->\n<!-- plot_abundance(ps, top25$OTU,labeller = \"Genus\") -->\n\n<!-- ``` -->\n\n\n\n<!-- <!-- **********************Transplant Patients*************************** --> -->\n\n<!-- <br> -->\n\n<!-- <br> -->\n\n<!-- ## Focused Analysis on Transplant Patients -->\n<!-- Following analysis looks at the transplant patients specifically. -->\n\n<!-- <br> -->\n\n<!-- <br> -->\n\n<!-- ```{r} -->\n<!-- #prune_samples() -->\n<!-- tps<-prune_samples(ps@sam_data$Group==\"Transplant\",ps) -->\n\n\n<!-- ``` -->\n\n\n<!-- ```{r} -->\n<!-- #plot_richness(ps,measures=c(\"Shannon\", \"Simpson\"), color=\"Group\") -->\n<!-- richness<-estimate_richness(tps) -->\n<!-- ``` -->\n\n\n<!-- ### Alpha Diversity {.tabset #alphaT} -->\n\n<!-- #### Sex -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n<!-- cols<-colp(2+length(levels(DF$Sex))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~Sex,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~Sex,showlegend=TRUE)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n<!-- #write.csv(x = DF %>% select(SampleID=sampleid,Batch=Group,Shannon,Simpson,InvSimpson,Fisher,Chao1,se.chao1,ACE,se.ACE),file = paste0(output_data,\"/alpha_diversity_transplant.csv\"),row.names = FALSE) -->\n\n<!--  fm_anov=formula(DF[,i]~Sex) -->\n<!--  sheet_name=\"Sex\" -->\n<!--  append=FALSE -->\n<!-- ``` -->\n\n\n<!-- ```{r alpha_plots} -->\n<!-- for(i in 1:length(pt$x$data)) -->\n<!--  pt$x$data[[i]]$legendgroup<-pt$x$data[[i]]$name -->\n\n<!--  pt -->\n\n\n<!-- ``` -->\n\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n<!-- ```{r, alpha_anov} -->\n<!-- anovtab <- as.data.frame(matrix(nrow=ncol(DF),ncol=2)) -->\n<!-- anov_res<-list() -->\n<!-- temp<-vector() -->\n<!-- for(i in 1:ncol(richness)){ -->\n<!--   anov_res[[i]]<-summary(aov(fm_anov,data =DF)) -->\n<!--   temp<-c(anov_res[[i]][[1]][1,2],anov_res[[i]][[1]][1,5]) -->\n<!--   names(temp)<-c(\"Sum Sq\",\"pvalue\") -->\n<!--   colnames(anovtab)<-names(temp) -->\n<!--   anovtab[i,]<-temp -->\n<!--   } -->\n<!-- anovtab<- na.omit(anovtab) -->\n<!-- rownames(anovtab)<-colnames(DF)[1:ncol(richness)] -->\n<!-- #anovtab$pvalue_fdr<-p.adjust(anovtab$pvalue,method=\"fdr\") -->\n<!-- #anovtab$pvalue_bonferroni<-p.adjust(anovtab$pvalue,method=\"bonferroni\") -->\n<!-- #anovtab<-anovtab%>%select(Alpha,1:6) -->\n<!-- format(anovtab,digits=2) %>% datatable2(.,rownames=TRUE) -->\n<!-- write.xlsx(anovtab,sheetName =sheet_name, append=append,file=paste0(output_data,\"/anova_alpha_diversity.xlsx\")) -->\n\n\n\n\n<!-- ``` -->\n\n<!-- #### Age Group -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n\n<!-- t.res<-list() -->\n<!-- split(x = DF,f = DF$Age_Groups)-> tt -->\n<!-- t.res[[1]]<-t.test(x = tt[[1]]$Shannon,y = tt[[2]]$Shannon) -->\n<!-- t.res[[2]]<-t.test(x = tt[[1]]$Simpson,y = tt[[2]]$Simpson) -->\n\n<!-- cols<-colp(2+length(levels(DF$Age_Groups))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~Age_Groups,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~Age_Groups)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n<!--   fm_anov=formula(DF[,i]~Age_Groups) -->\n<!--  sheet_name=\"Age_Groups\" -->\n<!--  append=TRUE -->\n<!-- ``` -->\n\n\n<!-- ```{r, ref.label='alpha_plots'} -->\n<!-- ``` -->\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n<!-- ```{r, ref.label='alpha_anov'} -->\n<!-- ``` -->\n\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- <!-- ```{r ref.label='t-test tables'} -->\n\n<!-- <!-- ``` --> \n\n<!-- #### ISD1 -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- DF<-DF[DF$ISD1!=\"\",] -->\n<!-- DF<-droplevels(DF) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n<!-- cols<-colp(2+length(levels(DF$ISD1))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~ISD1,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~ISD1)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n\n<!--   fm_anov=formula(DF[,i]~ISD1) -->\n<!--  sheet_name=\"ISD1\" -->\n\n<!-- ``` -->\n\n\n<!-- ```{r, ref.label='alpha_plots'} -->\n<!-- ``` -->\n\n\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n<!-- ```{r, ref.label='alpha_anov'} -->\n<!-- ``` -->\n\n\n<!-- #### ISD2 -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- DF<-DF[DF$ISD2!=\"\",] -->\n<!-- DF<-droplevels(DF) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n<!-- cols<-colp(2+length(levels(DF$ISD2))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~ISD2,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~ISD2)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n<!--  fm_anov=formula(DF[,i]~ISD2) -->\n<!--  sheet_name=\"ISD2\" -->\n\n<!-- ``` -->\n\n<!-- ```{r, ref.label='alpha_plots'} -->\n<!-- ``` -->\n\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n\n<!-- ```{r, ref.label='alpha_anov'} -->\n<!-- ``` -->\n\n\n<!-- #### Kidney_Disease -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- DF<-DF[DF$Kidney_Disease!=\"\",] -->\n<!-- DF<-droplevels(DF) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n<!-- cols<-colp(2+length(levels(DF$Kidney_Disease))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~Kidney_Disease,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~Kidney_Disease)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n\n<!--  fm_anov=formula(DF[,i]~Kidney_Disease) -->\n<!--  sheet_name=\"Kidney_Disease\" -->\n<!-- ``` -->\n\n<!-- ```{r, ref.label='alpha_plots'} -->\n<!-- ``` -->\n\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n\n<!-- ```{r, ref.label='alpha_anov'} -->\n<!-- ``` -->\n\n\n<!-- #### Diabetes -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- DF<-DF[DF$Diabetes!=\"\",] -->\n<!-- DF<-droplevels(DF) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n<!-- cols<-colp(2+length(levels(DF$Diabetes))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~Diabetes,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~Diabetes)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n<!-- fm_anov=formula(DF[,i]~Diabetes) -->\n<!--  sheet_name=\"Diabetes\"  -->\n\n\n<!-- #write.csv(x = DF %>% select(SampleID=sampleid,Batch=Group,Shannon,Simpson,InvSimpson,Fisher,Chao1,se.chao1,ACE,se.ACE),file = paste0(output_data,\"/alpha_diversity.csv\"),row.names = FALSE) -->\n<!-- ``` -->\n\n<!-- ```{r, ref.label='alpha_plots'} -->\n<!-- ``` -->\n\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n\n<!-- ```{r, ref.label='alpha_anov'} -->\n<!-- ``` -->\n\n\n<!-- #### Years Post Transplant -->\n\n<!-- ```{r} -->\n\n<!-- DF <- data.frame(richness, sample_data(tps)) -->\n<!-- #DF<-DF[!DF$Group==\"PLA0\" &!DF$Group==\"OFS0\",] -->\n\n<!-- DF$sampleid<-rownames(sample_data(tps)) -->\n<!-- DF<-DF[DF$Years_Post_Transplant_discrete!=\"\",] -->\n<!-- DF<-droplevels(DF) -->\n<!-- order<-sample(DF$sampleid) -->\n<!-- DF$order<-order -->\n<!-- cols<-colp(2+length(levels(DF$Years_Post_Transplant_discrete))) -->\n<!--  shan<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Shannon,colors=cols,color=~Years_Post_Transplant_discrete,showlegend=FALSE)%>% -->\n<!--  layout( margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  simp<-plot_ly(DF,marker=list(size=10)) %>% -->\n<!--    add_markers(x=~sampleid,y=~Simpson,colors=cols,color=~Years_Post_Transplant_discrete)%>% -->\n<!--  layout(margin=m,xaxis=ax,yaxis=ax) -->\n\n<!--  pt<-subplot(titleY = FALSE,shan,simp,nrows = 1, titleX = FALSE)%>% -->\n<!--    layout(annotations = list( -->\n<!--      list(x = 0.2 , y = 1.07, text = \"Shannon Index\",showarrow = F, xref='paper', yref='paper',font = title_f), -->\n<!--      list(x = 0.8 , y = 1.07, text = \"Simpson Index\", showarrow = F, xref='paper', yref='paper',font=title_f)), -->\n<!--      margin=1) -->\n\n<!-- fm_anov=formula(DF[,i]~Years_Post_Transplant_discrete) -->\n<!--  sheet_name=\"Years_Post_Transplant\"  -->\n\n\n<!-- #write.csv(x = DF %>% select(SampleID=sampleid,Batch=Group,Shannon,Simpson,InvSimpson,Fisher,Chao1,se.chao1,ACE,se.ACE),file = paste0(output_data,\"/alpha_diversity.csv\"),row.names = FALSE) -->\n<!-- ``` -->\n\n<!-- ```{r, ref.label='alpha_plots'} -->\n<!-- ``` -->\n\n<!-- <br> -->\n<!-- <br> -->\n\n<!-- ##### Anova -->\n\n<!-- ```{r, ref.label='alpha_anov'} -->\n<!-- ``` -->\n\n\n\n<!-- <br> -->\n\n<!-- <br> -->\n\n<!-- ### Beta Diversity {.tabset} -->\n\n<!-- Beta diversity represents the differences in species composition among samples. Here is measured using non-metric multidimensional scaling (NMDS) with Bray-Curtis dissimilarity as the distance measure. -->\n\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- sex<-prune_samples(tps@sam_data$Sex!=\"\",tps) -->\n\n<!-- cols=colp(2+length(levels(sex@sam_data$Sex))) -->\n<!-- print(cols) -->\n<!-- p<-sex %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"Sex\", title=\"Bray NMDS\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### Sex -->\n\n<!-- ```{r} -->\n<!--  ggplotly(p) -->\n<!-- ``` -->\n\n\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- age<-prune_samples(tps@sam_data$Age_Groups!=\"\",tps) -->\n<!-- cols=colp(2+length(levels(age@sam_data$Age_Groups))) -->\n<!-- p<-age %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"Age_Groups\", title=\"Bray NMDS\",label=\"ID\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### Age Groups -->\n\n<!-- ```{r} -->\n<!--   ggplotly(p) -->\n\n<!-- ``` -->\n\n\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- isd1<-prune_samples(tps@sam_data$ISD1!=\"\",tps) -->\n<!-- cols=colp(length(levels(isd1@sam_data$ISD1))) -->\n<!-- p<-isd1 %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"ISD1\", title=\"Bray NMDS\",label=\"ID\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### ISD1 -->\n\n<!-- ```{r} -->\n<!--  ggplotly(p) -->\n\n<!-- ``` -->\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- isd2<-prune_samples(tps@sam_data$ISD2!=\"\",tps) -->\n<!-- cols=colp(2+length(levels(isd2@sam_data$ISD2))) -->\n<!-- p<-isd2 %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"ISD2\", title=\"Bray NMDS\",label=\"ID\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### ISD2 -->\n\n<!-- ```{r} -->\n<!--   ggplotly(p) -->\n\n<!-- ``` -->\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- kd<-prune_samples(tps@sam_data$Kidney_Disease!=\"\",tps) -->\n<!-- cols=colp(2+length(levels(kd@sam_data$Kidney_Disease))) -->\n<!-- p<-kd %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"Kidney_Disease\", title=\"Bray NMDS\",label=\"ID\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### Kidney_Disease -->\n\n<!-- ```{r} -->\n<!--   ggplotly(p) -->\n\n<!-- ``` -->\n\n\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- db<-prune_samples(tps@sam_data$Diabetes!=\"\",tps) -->\n<!-- cols=colp(2+length(levels(db@sam_data$Diabetes))) -->\n<!-- p<-db %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"Diabetes\", title=\"Bray NMDS\",label=\"ID\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### Diabetes -->\n\n<!-- ```{r} -->\n<!--  ggplotly(p) -->\n<!-- #p -->\n<!-- ``` -->\n\n\n\n\n<!-- ```{r ,results=\"hide\"} -->\n<!-- #NMDS -->\n<!-- ypt<-prune_samples(tps@sam_data$Years_Post_Transplant_discrete!=\"\",tps) -->\n<!-- cols=colp(2+length(levels(ypt@sam_data$Years_Post_Transplant_discrete))) -->\n<!-- p<-ypt %>% -->\n<!--   transform_sample_counts(., function(x) log(1 + x)) %>% -->\n<!--   plot_ordination(., ordinate(., method=\"NMDS\", distance=\"bray\"), -->\n<!--                            color=\"Years_Post_Transplant_discrete\", title=\"Bray NMDS\",label=\"ID\")+ scale_colour_manual(values=cols)#%>% #+ theme_bw() %>% -->\n<!-- ``` -->\n\n<!-- #### Years Post Transplant -->\n\n<!-- ```{r} -->\n<!--   ggplotly(p) -->\n\n<!-- ``` -->\n\n\n<!-- #### PERMANOVA -->\n\n<!-- ```{r} -->\n<!-- d = phyloseq::distance(tps, \"bray\") -->\n<!-- sampdf = data.frame(sample_data(tps)) -->\n<!-- ad = adonis(d ~ ISD1+ISD2+Sex+ISD3+Age_Groups+Diabetes+Years_Post_Transplant_discrete, data = sampdf) -->\n<!-- ad$aov.tab %>% kable(.,format=\"markdown\",digits=4,caption = \"PERMANOVA Results (999 permutations)\") -->\n<!-- ``` -->\n\n\n\n<!-- ### Files -->\n\n<!-- [Relative Abunduance (xlsx)](results/Rel_Abundance.xlsx) -->\n\n<!-- [Alpha Diversity (csv)](results/alpha_diversity.csv) -->\n",
    "created" : 1501171792083.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3816663808",
    "id" : "8B893F2C",
    "lastKnownWriteTime" : 1501099745,
    "last_content_update" : 1501099745,
    "path" : "~/projects/Reimer/aspartame/second_run/Aspartame_study_run1.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}